#!/usr/bin/env ruby
require 'json'

# https://www.jvt.me/posts/2020/08/24/sort-recursive-hash-ruby/
def recursive_sort(v, &block)
  if v.class == Hash
    v.sorted_hash(&block)
  elsif v.class == Array
    v.collect {|a| recursive_sort(a, &block)}
  else
    v
  end
end

class Hash
  def sorted_hash(&block)
    self.class[
      self.each do |k,v|
        self[k] = recursive_sort(v, &block)
      end.sort(&block)]
  end
end

content = ARGF.read.strip
if content.start_with? '{'
  jj recursive_sort(JSON.parse(content))
  exit 0
elsif content.start_with? '"'
  # https://www.jvt.me/posts/2021/06/28/parse-encoded-json-string-ruby/
  $SAFE = 4
  jj recursive_sort(JSON.parse(eval content))
  exit 0
elsif content.start_with? 'eyJ' # it's Base64-encoded JSON
  if content.include? '.' # JWT
    puts `jwt <<< #{content}`
    exit 0
  else # Base64-encoded JSON
    require 'base64'
    jj recursive_sort(JSON.parse(Base64.urlsafe_decode64(content)))
    exit 0
  end
elsif content.start_with?('http') || content.start_with?('https')
  # try to parse the URL
  require 'uri'
  require 'cgi'
  uri = URI.parse(content)
  parsed = {
    uri: uri.to_s,
    base: "#{uri.scheme}://#{uri.host}",
    path: uri.path,
  }
  parsed[:query] = if uri.query
           CGI.parse(uri.query)
         else
           {}
         end
  parsed[:fragment] = if uri.fragment
                        unless uri.fragment.include?('&')
                          uri.fragment
                        else
                          CGI.parse(uri.fragment)
                        end
                      else
                        {}
                      end
  jj parsed
  exit 0
end

exit 1
