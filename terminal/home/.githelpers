#!/usr/bin/env bash
# vim: foldmethod=marker:foldlevel=0 textwidth=80 wrap
# -----------------------------------------------------------------------------
# .githelpers
# 	Various helper aliases and functions that make using Git that much better
# -----------------------------------------------------------------------------
# Location: $HOME/.githelpers
# -----------------------------------------------------------------------------

# -----------------------------------------------------------------------------
# => Timesaving aliases
# -----------------------------------------------------------------------------
# {{{
alias gc="git commit"
alias gcm="git commit --amend"
alias gst="git status -s --branch"
alias gco="git checkout"
alias gd="git diff"
alias gdc="git diff --cached"
alias ga="git add"
alias gap="git add -p"
alias gr="git remote"
alias glog="git log --stat"
alias glp="git log --patch"
alias gpl="git pull"
alias gplr="git pull --rebase"
alias gp="git push"
alias gsh="git show"
alias greb="git rebase"
alias gcm="git commit --amend"
alias gshowm="git log --format='%B' -1"
alias gap="git add --patch"
alias gch="git diff-tree --no-commit-id --name-only -r"
alias gs="git diff --name-only --cached"
# }}}

# Adapted from https://github.com/garybernhardt/dotfiles/blob/2c2a757f4abd406f6b4e1b328b6382d37f7f9036/.githelpers
function pretty_git_log () {
	git log --graph --color=always --pretty="tformat:$(pretty_git_log_format_string)" "$@" |
		pretty_git_graph_format |
		# Page only if we're asked to.
		if [ -n "$GIT_NO_PAGER" ]; then
			cat
		else
			# Page only if needed.
			less --quit-if-one-screen --no-init --RAW-CONTROL-CHARS --chop-long-lines
		fi
}

function pretty_git_log_format_delim() {
	echo '^'
}

function pretty_git_log_format_delim_replace() {
	echo "\\$(pretty_git_log_format_delim)"
}

function pretty_git_log_format_string() {
	local HASH="%C(yellow)%h%Creset"
	local RELATIVE_TIME="%Cgreen(%ar)%Creset"
	local AUTHOR="%C(bold blue)<%an>%Creset"
	local REFS="%C(bold red)%d%Creset"
	local SUBJECT="%s"
	local DELIM="$(pretty_git_log_format_delim)"

	local FORMAT="${HASH}${DELIM}${RELATIVE_TIME}${DELIM}${AUTHOR}${DELIM}${REFS} ${SUBJECT}"
	echo "$FORMAT"
}

pretty_git_graph_format() {
	# Replace (2 years ago) with (2 years)
	sed -Ee 's/(^[^<]*) ago\)/\1)/' |
		# Replace (2 years, 5 months) with (2 years)
		sed -Ee 's/(^[^<]*), [[:digit:]]+ .*months?\)/\1)/' |
		# Line columns up based on delimiter
		sed -Ee "s/$(pretty_git_log_format_delim_replace)/\\t/g" |
		# Color merge commits specially
		sed -Ee "s/(Merge (branch|remote-tracking branch|pull request) .*$)/$(printf "\033[91m")\1$(printf "\033[0m")/"
}

function fork_repo_remotes () {
	# Given an upstream repo that's been cloned, update the remotes to point to
	# the origin (fork) and upstrem remotes
	local upstream
	local origin

	upstream="$(git remote show -n origin |\
		sed -n '/Push  URL/p;' |\
		cut -f2- -d: |\
		cut -c2-)"
	origin="$(sed 's/\([a-z]\/\)[^\/]*\(\/\)/\1jamietanna\2/' <<< "$upstream")"

	git remote set-url origin "$origin"
	git remote add upstream "$upstream"
	git fetch
}

alias glg="pretty_git_log"

# get to the top of our git repo
alias gitroot='git rev-parse --show-toplevel'
alias groot='cd $(gitroot)'

# get the remote of a git repo
# NOTE: assumes that the push is the correct repo address
function grv () {
	local remote
	remote="${1:-origin}"
	git remote -v | grep "$remote" | cut -f2 | cut -f1 -d' ' | tail -n1
}

function gpu() {
	local localBranch="$(git rev-parse --abbrev-ref HEAD)"
	local branchToPushTo="${1:-$localBranch}"
	local remoteToPushTo="${2:-origin}"
	# if we don't already have an upstream, then warn
	if [[ $(git config "branch.${localBranch}.merge") = '' ]]; then
		echo -n  "gpu: This will push ${localBranch} to ${remoteToPushTo}/${branchToPushTo}. Continue? <CR> to continue "
		read
	fi
	git push -u "${remoteToPushTo}" "${branchToPushTo}"
}

function git-branch-cleanup() {
	git branch --merged | egrep -v "(^\*|master|develop)" | xargs git branch -d
	git remote prune origin
}

function gcob() {
	local branches
	branches="$(git branch --format '%(refname:short)')"
	if grep -q "^$1$" <<< "$branches" ; then
		echo "Branch $1 already exists, checking it out..."
		git checkout "$1"
	else
		if [[ -n "$2" ]]; then
			git checkout -b "$1" "$2"
		else
			git checkout -b "$1"
		fi
	fi
}
