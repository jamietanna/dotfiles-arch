#!/bin/bash

DIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )
. $DIR/panel_colors
. /etc/profile.d/bspwm_panel.sh

CPU_USAGE_THRESHOLD_HIGH="$(($(nproc) * ${CPU_USAGE_THRESHOLD_HIGH:-80}))"
CPU_USAGE_THRESHOLD_MEDIUM="$(($(nproc) * ${CPU_USAGE_THRESHOLD_MEDIUM:-50}))"
CPU_USAGE_THRESHOLD_LOW="$(($(nproc) * ${CPU_USAGE_THRESHOLD_LOW:-20}))"

TEMPERATURE_THRESHOLD_HIGH=${TEMPERATURE_THRESHOLD_HIGH:-80}
TEMPERATURE_THRESHOLD_MEDIUM=${TEMPERATURE_THRESHOLD_MEDIUM:-60}
TEMPERATURE_THRESHOLD_LOW=${TEMPERATURE_THRESHOLD_LOW:-40}

MEMORY_USAGE_THRESHOLD_HIGH=${MEMORY_USAGE_THRESHOLD_HIGH:-70}
MEMORY_USAGE_THRESHOLD_MEDIUM=${MEMORY_USAGE_THRESHOLD_MEDIUM:-50}
MEMORY_USAGE_THRESHOLD_LOW=${MEMORY_USAGE_THRESHOLD_LOW:-30}

BATTERY_THRESHOLD_CRITICAL=${BATTERY_THRESHOLD_CRITICAL:-20}
BATTERY_THRESHOLD_LOW=${BATTERY_THRESHOLD_LOW:-40}

num_mon=$(bspc query -M | wc -l)

while read -r line ; do
	case $line in
		M*)
			line_out=$(echo $line | cut -c 4-)
			if [[ -z "$line_out" ]];
			then
				line_out=""
			else
				line_out=" ${line_out} "
			fi

			case $line in
				Mpl*)
					music=$(bar_color COLOR_MUSIC_PLAYING "${line_out}")
				;;
				Mpa*)
					music=$(bar_color COLOR_MUSIC_PAUSED "${line_out}")
				;;
				*)
					music=$(bar_color COLOR_MUSIC_STOPPED "${line_out}")
				;;
			esac
			;;
		P*)
			package_count=$(echo "$line" | cut -c 3-)
			case $line in
				Pk*)
					packages=$(bar_color COLOR_PACKAGE_IMPORTANT " ${package_count} ")
					;;
				Pp*)
					packages=$(bar_color COLOR_PACKAGE " ${package_count} ")
					;;
			esac
			if [[ "$package_count" -eq "0" || -z "$package_count" ]];
			then
				packages=$(bar_color COLOR_PACKAGE_NONE " 0 ")
			fi

			packages="%{A1:~/bin/checkupdates.sh 'notify':}%{A3:~/bin/checkupdates.sh:}$packages%{A}%{A}"
			;;
		X*)
			network=""
			bar_color_var=""
			line_in=$(echo $line | cut -c 2-)
			IFS=';' read -ra network_triple <<< "$line_in"
			for triple in "${network_triple[@]}"; do
				IFS=',' read -ra triple_split <<< "$triple"
				output=""

				if [[ "${triple_split[0]}" == "C" ]];
				then
					if echo "${triple_split[1]}" | grep -qP "^tun";
					then
						bar_color_var="COLOR_NETWORK_TUN"
					else
						bar_color_var="COLOR_NETWORK_NORMAL"
					fi
					output="${triple_split[1]}: ${triple_split[2]}"
				else
					bar_color_var="COLOR_NETWORK_DIS"
					output="${triple_split[1]}"
				fi
				network+="$(bar_color $bar_color_var " $output ")"
			done
			;;
		V*)
			if [[ ${line#?} -eq 0 ]];
			then
				volume=$(bar_color COLOR_VOLUME_OFF " ${line#?}% ")
			else
				volume=$(bar_color COLOR_VOLUME_ON " ${line#?}% ")
			fi
			;;
		B*)
			percentage=$(echo $line | grep -oP '\d+(?=%)')
			color_var="COLOR_BATTERY_NORMAL"
			if [[ $percentage -le $BATTERY_THRESHOLD_CRITICAL ]];
			then
				color_var="COLOR_BATTERY_CRITICAL"
			elif [[ $percentage -le $BATTERY_THRESHOLD_LOW ]];
			then
				color_var="COLOR_BATTERY_LOW"
			fi
			battery=$(bar_color "$color_var" " ${line#?} ")
			;;
		H*)
			# hostname
			hostname=$(bar_color COLOR_HOSTNAME " ${line#?} ")
			;;
		S*)
			hour=$(echo "$line" | sed 's/.* \([0-9]*\).*/\1/')
			if [[ $hour -ge 22 ]] || [[ $hour -lt 9 ]];
			then
				sys_infos=$(bar_color COLOR_CLOCK_LATE " ${line#?} ")
			else
				sys_infos=$(bar_color COLOR_CLOCK_NORMAL " ${line#?} ")
			fi

			sys_infos="%{A:~/bin/date.sh:}$sys_infos%{A}"
			;;
		T*)
			# xtitle output
			title=$(bar_color COLOR_TITLE " ${line#?} ")
			;;
		LOAD*)
			# load temp and load
			load_data=$(echo $line | cut -c5-)
			# http://stackoverflow.com/questions/10586153/split-string-into-an-array-in-bash
			IFS=',' read -a arr_load_data <<< "$load_data"

			cpu_threshold_colour_var=""
			if [[ "${arr_load_data[0]}" -ge "$CPU_USAGE_THRESHOLD_HIGH" ]];
			then
				cpu_threshold_colour_var="COLOR_LOAD_HIGH_CPU_USAGE"
			elif [[ "${arr_load_data[0]}" -ge "$CPU_USAGE_THRESHOLD_MEDIUM" ]];
			then
				cpu_threshold_colour_var="COLOR_LOAD_MEDIUM_CPU_USAGE"
			elif [[ "${arr_load_data[0]}" -ge "$CPU_USAGE_THRESHOLD_LOW" ]];
			then
				cpu_threshold_colour_var="COLOR_LOAD_LOW_CPU_USAGE"
			else
				cpu_threshold_colour_var="COLOR_LOAD_NORMAL_CPU_USAGE"
			fi

			memory_threshold_colour_var="COLOR_LOAD_NORMAL_MEMORY_USAGE"
			if [[ "${arr_load_data[1]}" -ge "$MEMORY_USAGE_THRESHOLD_HIGH" ]];
			then
				memory_threshold_colour_var="COLOR_LOAD_HIGH_MEMORY_USAGE"
			elif [[ "${arr_load_data[1]}" -ge "$MEMORY_USAGE_THRESHOLD_MEDIUM" ]];
			then
				memory_threshold_colour_var="COLOR_LOAD_MEDIUM_MEMORY_USAGE"
			elif [[ "${arr_load_data[1]}" -ge "$MEMORY_USAGE_THRESHOLD_LOW" ]];
			then
				memory_threshold_colour_var="COLOR_LOAD_LOW_MEMORY_USAGE"
			fi

			temp_threshold_colour_var="COLOR_LOAD_NORMAL_TEMP"
			if [[ "${arr_load_data[2]}" -ge "$TEMPERATURE_THRESHOLD_HIGH" ]];
			then
				temp_threshold_colour_var="COLOR_LOAD_HIGH_TEMP"
			elif [[ "${arr_load_data[2]}" -ge "$TEMPERATURE_THRESHOLD_MEDIUM" ]];
			then
				temp_threshold_colour_var="COLOR_LOAD_MEDIUM_TEMP"
			elif [[ "${arr_load_data[2]}" -ge "$TEMPERATURE_THRESHOLD_LOW" ]];
			then
				temp_threshold_colour_var="COLOR_LOAD_LOW_TEMP"
			fi

			system_load_info=" "
			system_load_info+="$(bar_color $cpu_threshold_colour_var "${arr_load_data[0]}%")"
			system_load_info+="@"
			system_load_info+="$(bar_color $temp_threshold_colour_var "${arr_load_data[1]}c")"
			system_load_info+=" "
			system_load_info+="$(bar_color $memory_threshold_colour_var "${arr_load_data[2]}%")"
			system_load_info+=" "
			;;
		W*)
			# bspwm internal state
			wm_infos=""
			IFS=':'
			set -- ${line#?}
			while [ $# -gt 0 ] ; do
				item=$1
				name=${item#?}
				color_var=""
				spacing_pre=""
				spacing_post=""
				case $item in
					M*)
						# active monitor
						if [ $num_mon -gt 1 ] ; then
							color_var="COLOR_ACTIVE_MONITOR"
							spacing_post=" "
						fi
						;;
					m*)
						# inactive monitor
						if [ $num_mon -gt 1 ] ; then
							color_var="COLOR_INACTIVE_MONITOR"
							spacing_post=" "
						fi
						;;
					O*)
						# focused occupied desktop
						color_var="COLOR_ACTIVE_OCCUPIED"
						;;
					F*)
						# focused free desktop
						color_var="COLOR_ACTIVE_FREE"
						;;
					U*)
						# focused urgent desktop
						color_var="COLOR_ACTIVE_URGENT"
						;;
					o*)
						# occupied desktop
						color_var="COLOR_INACTIVE_OCCUPIED"
						;;
					f*)
						# free desktop
						color_var="COLOR_INACTIVE_FREE"
						;;
					u*)
						# urgent desktop
						color_var="COLOR_INACTIVE_URGENT"
						;;
					L*)
						# layout
						color_var="COLOR_LAYOUT"
						spacing_pre=" "
						;;
				esac

				if [[ -n "$color_var" ]];
				then
					wm_infos="${wm_infos}${spacing_pre}$(bar_color "$color_var" " ${name} ")${spacing_post}"
				fi
				shift
			done
			;;
	esac
	printf "%s\n" "%{l}${wm_infos}%{c}${title}%{r}${network}${system_load_info}${battery}${music}${volume}${hostname}${packages}${sys_infos}"
done
