#!/bin/bash

DIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )
. $DIR/panel_colors

TEMPERATURE_THRESHOLD=60

num_mon=$(bspc query -M | wc -l)

while read -r line ; do
	case $line in
		M*)
			line_out=$(echo $line | cut -c 4-)
			if [[ -z "$line_out" ]];
			then
				line_out=""
			else
				line_out=" ${line_out} "
			fi

			case $line in
				Mpl*)
					music=$(bar_color COLOR_MUSIC_PLAYING "${line_out}")
				;;
				Mpa*)
					music=$(bar_color COLOR_MUSIC_PAUSED "${line_out}")
				;;
				*)
					music=$(bar_color COLOR_MUSIC_STOPPED "${line_out}")
				;;
			esac
			;;
		P*)
			package_count=$(echo "$line" | cut -c 3-)
			case $line in
				Pk*)
					packages=$(bar_color COLOR_PACKAGE_IMPORTANT " ${package_count} ")
					;;
				Pp*)
					packages=$(bar_color COLOR_PACKAGE " ${package_count} ")
					;;
			esac
			if [[ "$package_count" -eq "0" || -z "$package_count" ]];
			then
				packages=$(bar_color COLOR_PACKAGE_NONE " 0 ")
			fi

			packages="%{A1:~/bin/checkupdates.sh 'notify':}%{A3:~/bin/checkupdates.sh:}$packages%{A}%{A}"
			;;
		X*)
			line_out=$(echo $line | cut -c 3-)
			case $line in
				XC*)
					if echo $line_out | grep -e "tun[0-9]" 2>/dev/null;
					then
						network=$(bar_color COLOR_NETWORK_TUN " ${line_out} ")
					else
						network=$(bar_color COLOR_NETWORK_NORMAL " ${line_out} ")
					fi
				;;
				XD*)
					network=$(bar_color COLOR_NETWORK_DIS " ${line_out} ")
				;;
			esac
			;;
		V*)
			if [[ ${line#?} -eq 0 ]];
			then
				volume=$(bar_color COLOR_VOLUME_OFF " ${line#?}%% ")
			else
				volume=$(bar_color COLOR_VOLUME_ON " ${line#?}%% ")
			fi
			;;
		B*)
			percentage=$(echo $line | grep -oP '\d+(?=%)')
			if [[ $percentage -le 20 ]];
			then
				battery=$(bar_color COLOR_BATTERY_LOW " ${line#?} ")
			else
				battery=$(bar_color COLOR_BATTERY_NORMAL " ${line#?} ")
			fi
			;;
		H*)
			# hostname
			hostname=$(bar_color COLOR_HOSTNAME " ${line#?} ")
			;;
		S*)
			hour=$(echo "$line" | sed 's/.* \([0-9]*\).*/\1/')
			if [[ $hour -ge 22 ]] || [[ $hour -lt 9 ]];
			then
				sys_infos=$(bar_color COLOR_CLOCK_LATE " ${line#?} ")
			else
				sys_infos=$(bar_color COLOR_CLOCK_NORMAL " ${line#?} ")
			fi

			sys_infos="%{A:~/bin/date.sh:}$sys_infos%{A}"
			;;
		T*)
			# xtitle output
			title=$(bar_color COLOR_TITLE " ${line#?} ")
			;;
		LOAD*)
			# load temp and load
			load_data=$(echo $line | cut -c5-)
			# http://stackoverflow.com/questions/10586153/split-string-into-an-array-in-bash
			IFS=' ' read -a arr_load_data <<< "$load_data"
			IFS='@' read -a arr_cpu_data <<< "$arr_load_data"

			load_colour_bg="COLOR_LOAD_NORMAL_TEMP"

			load_temperature=$(egrep -o "[0-9]+" <<< "${arr_cpu_data[1]}")
			if [[ "$load_temperature" -ge "$TEMPERATURE_THRESHOLD" ]];
			then
				load_colour_bg="COLOR_LOAD_HIGH_TEMP"
			fi

			system_load_info=$(bar_color $load_colour_bg " ${load_data} ")
			;;
		W*)
			# bspwm internal state
			wm_infos=""
			IFS=':'
			set -- ${line#?}
			while [ $# -gt 0 ] ; do
				item=$1
				name=${item#?}
				case $item in
					M*)
						# active monitor
						if [ $num_mon -gt 1 ] ; then
							wm_infos="${wm_infos}$(bar_color COLOR_ACTIVE_MONITOR " ${name} ")"
						fi
						;;
					m*)
						# inactive monitor
						if [ $num_mon -gt 1 ] ; then
							wm_infos="${wm_infos}$(bar_color COLOR_INACTIVE_MONITOR " ${name} ")"
						fi
						;;
					O*)
						# focused occupied desktop
						wm_infos="${wm_infos}$(bar_color COLOR_FOCUSED_OCCUPIED "$(bar_underline $_FG_COL " ${name} ")")"
						;;
					F*)
						# focused free desktop
						wm_infos="${wm_infos}$(bar_color COLOR_FOCUSED_FREE "$(bar_underline $_FG_COL " ${name} ")")"
						;;
					U*)
						# focused urgent desktop
						wm_infos="${wm_infos}$(bar_color COLOR_FOCUSED_URGENT "$(bar_underline $_FG_COL " ${name} ")")"
						;;
					o*)
						# occupied desktop
						wm_infos="${wm_infos}$(bar_color COLOR_OCCUPIED " ${name} ")"
						;;
					f*)
						# free desktop
						wm_infos="${wm_infos}$(bar_color COLOR_FREE " ${name} ")"
						;;
					u*)
						# urgent desktop
						wm_infos="${wm_infos}$(bar_color COLOR_URGENT " ${name} ")"
						;;
					L*)
						# layout
						wm_infos="${wm_infos}$(bar_color COLOR_LAYOUT " ${name} ")"
						;;
				esac
				shift
			done
			;;
	esac
	printf "%s\n" "%{l}${wm_infos}%{c}${title}%{r}${network}${system_load_info}${battery}${music}${volume}${hostname}${packages}${sys_infos}"
done
